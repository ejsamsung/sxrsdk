apply plugin: 'com.android.library'

repositories {
    flatDir {
        dirs '../../sxr-libs/'
    }
}


task extractBulletReleaseLibs (type: Copy) {
    println 'Extracting Bullet Release *.so file(s)....'

    from zipTree("src/main/aar/bullet3-release.aar")
    into "src/main/jniLibs"
    include "jni/**/*.so"

    eachFile {
        def segments = it.getRelativePath().getSegments() as List
        println segments
        it.setPath(segments.tail().join("/"))
        return it
    }
    includeEmptyDirs = false
}

task extractBulletDebugLibs (type: Copy) {
    println 'Extracting Bullet Debug *.so file(s)....'

    from zipTree("src/main/aar/bullet3-debug.aar")
    into "src/main/jniLibs"
    include "jni/**/*.so"

    eachFile {
        def segments = it.getRelativePath().getSegments() as List
        println segments
        it.setPath(segments.tail().join("/"))
        return it
    }
    includeEmptyDirs = false
}

android {
    compileSdkVersion 26

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 26
        packagingOptions {
            pickFirst 'lib/x86/libc++_shared.so'
            pickFirst 'lib/arm64-v8a/libc++_shared.so'
            pickFirst 'lib/armeabi-v7a/libc++_shared.so'
            pickFirst 'lib/x86_64/libc++_shared.so'
            doNotStrip 'jniLibs/*/*.so'
            exclude 'src/main/jniLibs'
        }
    }

    buildTypes {
        debug {
            debuggable = true
            jniDebuggable = true
            externalNativeBuild {
                cmake {
                    arguments '-DANDROID_PLATFORM=android-21',
                            '-DANDROID_TOOLCHAIN=clang',
                            '-DANDROID_STL=c++_shared',
                            '-DCMAKE_BUILD_TYPE=Debug'
                }
            }
            preBuild.dependsOn(extractBulletDebugLibs)
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
            externalNativeBuild {
                cmake {
                    arguments '-DANDROID_PLATFORM=android-21',
                            '-DANDROID_TOOLCHAIN=clang',
                            '-DANDROID_STL=c++_shared',
                            '-DCMAKE_BUILD_TYPE=Release'
                }
            }
            preBuild.dependsOn(extractBulletReleaseLibs)
        }
    }
    sourceSets.main {
        java.srcDirs = ['src/main/java']
        jni.srcDirs = [] // no auto generation of Android.mk
        jniLibs.srcDirs - ['src/main/jniLibs']
    }
    externalNativeBuild {
        cmake {
            path 'src/main/jni/CMakeLists.txt'
        }
    }
}

project.ext.jomlVersion = "1.9.3-SNAPSHOT"

dependencies {
    implementation "org.joml:joml-android:${jomlVersion}"
    if (findProject(':sxrsdk')) {
        implementation project (':sxrsdk')
    } else {
        implementation(name: 'sxrsdk-debug', ext: 'aar')
    }
}

clean {}.doLast {
    def sxrLibs = project.rootDir.absolutePath + "/../sxr-libs"
    if (file(sxrLibs).exists()) {
        project.delete(sxrLibs + '/' + project.name + '-release.aar')
        project.delete(sxrLibs + '/' + project.name + '-debug.aar')
    }
}


task copyJarToBin(type: Copy) {
    outputs.upToDateWhen { false }
    from tasks.matching { it.name.startsWith('bundle') }
    into project.rootDir.absolutePath + "/../sxr-libs"
}

tasks.whenTaskAdded { task ->
    if (task.name == 'bundleDebugAar') {
        task.finalizedBy(copyJarToBin)
    } else if (task.name == 'bundleReleaseAar') {
        task.finalizedBy(copyJarToBin)
    }
}

